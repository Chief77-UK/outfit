// Basic prototype of a voice-task-list app in React Native
// This uses Expo for quick prototyping. We'll use Expo Audio, React Native Gesture Handler, and Firebase for real-time sync

import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, Alert } from 'react-native';
import { Audio } from 'expo-av';
import { Swipeable } from 'react-native-gesture-handler';
import uuid from 'react-native-uuid';

const App = () => {
  const [tasks, setTasks] = useState([]);
  const [recording, setRecording] = useState(null);

  const startRecording = async () => {
    try {
      await Audio.requestPermissionsAsync();
      await Audio.setAudioModeAsync({ allowsRecordingIOS: true, playsInSilentModeIOS: true });
      const { recording } = await Audio.Recording.createAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);
      setRecording(recording);
    } catch (err) {
      console.error('Failed to start recording', err);
    }
  };

  const stopRecording = async () => {
    setRecording(undefined);
    await recording.stopAndUnloadAsync();
    const uri = recording.getURI();

    // Placeholder transcription step
    const fakeTranscription = `Task recorded at ${new Date().toLocaleTimeString()}`;
    const newTask = { id: uuid.v4(), text: fakeTranscription };
    setTasks((prev) => [...prev, newTask]);
  };

  const deleteTask = (id) => {
    setTasks((prev) => prev.filter((task) => task.id !== id));
  };

  const renderTask = ({ item }) => (
    <Swipeable
      renderRightActions={() => (
        <TouchableOpacity style={styles.deleteButton} onPress={() => deleteTask(item.id)}>
          <Text style={styles.deleteText}>Delete</Text>
        </TouchableOpacity>
      )}
    >
      <View style={styles.taskItem}>
        <Text>{item.text}</Text>
      </View>
    </Swipeable>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Voice Task List</Text>
      <FlatList data={tasks} renderItem={renderTask} keyExtractor={(item) => item.id.toString()} />
      <TouchableOpacity
        onPress={recording ? stopRecording : startRecording}
        style={styles.recordButton}
      >
        <Text style={styles.recordText}>{recording ? 'Stop' : 'Record Task'}</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, paddingTop: 60, backgroundColor: '#fff' },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20 },
  recordButton: { backgroundColor: '#333', padding: 15, borderRadius: 10, alignItems: 'center', marginTop: 20 },
  recordText: { color: '#fff', fontSize: 18 },
  taskItem: { padding: 20, backgroundColor: '#f1f1f1', marginBottom: 10, borderRadius: 10 },
  deleteButton: { backgroundColor: '#ff4d4d', justifyContent: 'center', alignItems: 'center', width: 80 },
  deleteText: { color: '#fff', fontWeight: 'bold' },
});

export default App;
